# WebJars
->      /webjars                            webjars.Routes
GET     /vassets/*file                      controllers.Assets.versioned(path="/public", file: Asset)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                       controllers.Assets.at(path="/public", file)

GET     /                                   org.assessory.play.controllers.Application.index

# LTI login and redirect route
POST    /lti/course/:cid/*path              org.assessory.play.controllers.LTIController.courseLtiAndRedirect(cid, path)

# Temporary routes for video submission
POST    /lti/videopost/:cid                 org.assessory.play.controllers.LTIController.ltiVideoForm(cid)
POST    /videosubmit                        org.assessory.play.controllers.LTIController.ltiVideoSubmit
GET     /whoami                             org.assessory.play.controllers.Application.whoAmI
POST    /ltiTest                            org.assessory.play.controllers.Application.ltiTest


# Logged in user
POST	  /api/self						    org.assessory.play.controllers.UserController.self

POST	/api/signUp					    	org.assessory.play.controllers.UserController.signUp
POST	/api/logIn 				    		org.assessory.play.controllers.UserController.logIn
POST	/api/logOut				    		org.assessory.play.controllers.UserController.logOut
GET     /auto/:userId/:secret               org.assessory.play.controllers.UserController.autologin(userId, secret)

# Courses
POST    /api/course/my                      org.assessory.play.controllers.CourseController.myCourses
GET     /api/course/:id                     org.assessory.play.controllers.CourseController.get(id)
POST    /api/course/create                  org.assessory.play.controllers.CourseController.create
POST    /api/course/findMany                org.assessory.play.controllers.CourseController.findMany
GET     /api/course/:id/autolinks.csv       org.assessory.play.controllers.CourseController.autolinks(id)

# Users
POST    /api/user/findMany                  org.assessory.play.controllers.UserController.findMany
GET     /api/user/:id                       org.assessory.play.controllers.UserController.findOne(id)

# Groups
POST    /api/course/:courseId/group/my      org.assessory.play.controllers.GroupController.myGroupsInCourse(courseId)
POST    /api/groupSet/:gsId/groups          org.assessory.play.controllers.GroupController.groupSetGroups(gsId)
POST    /api/group/findMany                 org.assessory.play.controllers.GroupController.findMany
POST    /api/group/my                       org.assessory.play.controllers.GroupController.myGroups
GET     /api/group/:id                      org.assessory.play.controllers.GroupController.group(id)

# GroupSets
GET     /api/course/:courseId/groupSets     org.assessory.play.controllers.GroupController.courseGroupSets(courseId)
GET     /api/groupSet/:gsId                 org.assessory.play.controllers.GroupController.groupSet(gsId)
POST    /api/groupSet/:gsId                 org.assessory.play.controllers.GroupController.editGroupSet(gsId)
POST    /api/course/:courseId/createGroupSet  org.assessory.play.controllers.GroupController.createGroupSet(courseId)

# Tasks
GET     /api/task/:id                       org.assessory.play.controllers.TaskController.get(id)
POST    /api/course/:courseId/task/create   org.assessory.play.controllers.TaskController.create(courseId)
GET     /api/course/:courseId/tasks         org.assessory.play.controllers.TaskController.courseTasks(courseId)
POST    /api/task/:id/body                  org.assessory.play.controllers.TaskController.updateBody(id)

# Task Output
GET     /api/taskoutput/:toId               org.assessory.play.controllers.TaskOutputController.get(toId)
POST    /api/taskoutput/:toId               org.assessory.play.controllers.TaskOutputController.updateBody(toId)
POST    /api/taskoutput/:toId/finalise      org.assessory.play.controllers.TaskOutputController.finalise(toId)
POST    /api/task/:taskId/newOutput         org.assessory.play.controllers.TaskOutputController.create(taskId)
GET     /api/task/:taskId/myOutputs         org.assessory.play.controllers.TaskOutputController.myOutputs(taskId)
POST    /api/task/:taskId/allOutputs        org.assessory.play.controllers.TaskOutputController.allOutputs(taskId)
GET     /api/task/:id/outputs.csv           org.assessory.play.controllers.TaskOutputController.outputsAsCSV(id)

# Critiques
GET     /api/critique/:id/myAllocations            org.assessory.play.controllers.CritController.myAllocations(id)
GET     /api/critique/:id/allocations.csv          org.assessory.play.controllers.CritController.allocationsAsCSV(id)
POST    /api/critique/:taskId/findOrCreateCrit     org.assessory.play.controllers.CritController.findOrCreateCrit(taskId)

# SmallFiles
POST    /api/smallfiles/:courseId/upload                    org.assessory.play.controllers.SmallFileController.uploadFile(courseId)
GET     /api/smallfiles/:smallFileId/download     org.assessory.play.controllers.SmallFileController.downloadFile(smallFileId)
GET     /api/smallfiles/:smallFileId/details      org.assessory.play.controllers.SmallFileController.getDetails(smallFileId)

POST    /api/critique/:id/taskOutputsFor            org.assessory.play.controllers.CritController.taskOutputsFor(id)

# Auth
GET     /oauth/github                org.assessory.play.oauth.GitHubController.getAuth
POST    /oauth/github                org.assessory.play.oauth.GitHubController.requestAuth
GET     /oauth/github/callback       org.assessory.play.oauth.GitHubController.callback
